content of the gameFile:
each gameFile start with the game name
following this is a list of players
the order of the players is their order around the table
I will call all this information the header
after the header is the body, this will vary between games

the gameFile body in hearts:
in hearts the body will first by empty
if the body is empty the master will write a deal to the gameFile
a deal is a permutation of the numbers 00,01...51
(00=2hearts,01=3hearts...13=2spades...)
notice all numbers are padded to take up 2 chars
all players can then read this and determine their hand
(first player takes first 13 cards, second takes second 13 etc)
after this all cards played by a player are appended to the body
eg: gameFile = (header goes here) (deal goes here) 39514243
this means the cards played were 39,51,42,43 = 2clubs,aceClubs,5clubs,6clubs
this continues until all cards are played
by examining the body, it can be determined whose turn it is
if hearts have broken (and therefore if one can play hearts)
what the suit is (and therefore what suit one can play)
and how many points each player has

Here is a simplified version of the above

simple hearts (no swap at start of round)
1: master writes deal (a permutation of 00,01...51)
2: each player determines if it is their turn and writes and a card if it is
3: repeat 2 until no cards left
4: repeat 1 through 3 until 100 points reached (or some number other than 100)

for the swap, there needs to be a "swap ID" that tells the player what direction
the swap will go, 0=no swap, 1=cw, 2=ccw, 3=across

hearts with swap:
1: master writes deal followed by a swap ID
2: each player writes the 3 cards they want to swap when it is there turn
3: each player determines if it is their turn and writes and a card if it is
4: repeat 3 until no cards left
5: repeat 1 through 4 until 100 points reached





interfacing the logic with the graphics:
here are the basic graphics that need to exist
I'll break then into static graphics and dynamic graphics

1) static: table with n of 4 players having cards in front of them (n could be 0,1,2,3,4)
2) dynamic: the playing of a card
   this is a transition between state (1) with n cards and n+1 cards
3) dynamic: collecting of cards by winner of trick
   this is a transition between state (1) with 4 cards and 0 cards
4) static: intermediate scoreboard showing the chages in scores after the round
5) dynamic: transition from 0 cards to scoreboard
6) static: final score board showing the final scores of the game
7) dynamic: transition from the game loading state to the initial state with
   0 cards on the table

none of the dynamic states are needed, you could just have it go straight to the new state
however it would be nice to have the ablility to add these later so for now I think we
could just have the dynamic state do nothing but then later fill them in

however the static states are nessisary


passing props to a graphics state:
Note: all dynamic states will also have a time passed to then telling them how long to take
      also all states are passed a quit function so that it can have a quit button
      that quits the game

state 1: input passed as an array of length 4 with the first entry (ar[0]) coresonding
         to the card infront of player 1, the second the card in front of player 2 etc
         and so on. -1 means no card, 0 means 2 of hearts, etc
         eg: [-1,13,14,26] means no card infront of player1, 2spades infront of player2,
         3spades infront of player3 and 2diamonds infront of player4
         also passed any array of length 52 of cards infront of the player
         this contains a 0 if the player doesn't have the card, 1 if they can't play it
         and 2 if they can play it
         also passed a function that takes a single card tell the logic that that card was played
state 2: 2 arrays, one for the previous state, and another for the next state
state 3: 1 array for the previous state
state 4: an array of length 4 containing the scores
state 5: an array of length 4 containing the scores
state 6: an array of length 4 containing the scores
state 7: nothing


my plan:
If you have any objections to this let me know but basically I'm thinking
that you could make a class for each of these staes (and any more you think we need)
and then I could make the logic so that I just pass it the various props
to the correct graphics state

Also I basically just sat down and dumped this onto the page so I'm not claiming that this
is a particularly good way of designing the app so If you have any ideas let me know.
There are probably lots of things about this that are poorly thought out so please point
them out to me














